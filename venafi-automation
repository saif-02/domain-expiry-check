import requests
import csv
from datetime import datetime, timedelta
import pytz

# Configuration
BASE_URL = "https://venafi.cloud.com/vedsdk/certificates"
BEARER_TOKEN = "your_bearer_token_here"

# Set up headers for authentication
HEADERS = {
    "Authorization": f"Bearer {BEARER_TOKEN}",
    "Content-Type": "application/json",
}

def fetch_certificates():
    """Fetch certificate data from the Venafi API."""
    response = requests.get(BASE_URL, headers=HEADERS)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code} - {response.text}")
        return None

def write_json_to_csv(certificates, filename="certificates.csv"):
    """Write JSON data to a CSV file."""
    if not certificates:
        print("No data to write to CSV.")
        return
    
    # Extract keys for CSV header from the first certificate
    keys = certificates[0].keys()
    
    with open(filename, mode='w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=keys)
        writer.writeheader()
        writer.writerows(certificates)
    
    print(f"Certificates data written to {filename}")

def analyze_certificates(certificates):
    """Analyze certificates to find those created in the last and current month."""
    now = datetime.now(pytz.UTC)
    start_of_current_month = datetime(now.year, now.month, 1, tzinfo=pytz.UTC)
    start_of_last_month = start_of_current_month - timedelta(days=1)
    start_of_last_month = datetime(start_of_last_month.year, start_of_last_month.month, 1, tzinfo=pytz.UTC)

    last_month_count = 0
    current_month_count = 0

    for cert in certificates:
        created_on = cert.get("CreatedOn")
        if created_on:
            created_date = datetime.fromisoformat(created_on.rstrip("Z")).replace(tzinfo=pytz.UTC)
            if start_of_last_month <= created_date < start_of_current_month:
                last_month_count += 1
            elif created_date >= start_of_current_month:
                current_month_count += 1

    return last_month_count, current_month_count

def main():
    certificates_data = fetch_certificates()
    if certificates_data and "Certificates" in certificates_data:
        certificates = certificates_data["Certificates"]
        # Write the JSON data to CSV
        write_json_to_csv(certificates)
        # Analyze the certificates
        last_month_count, current_month_count = analyze_certificates(certificates)
        print(f"Certificates created last month: {last_month_count}")
        print(f"Certificates created this month: {current_month_count}")
    else:
        print("No certificate data found.")

if __name__ == "__main__":
    main()
